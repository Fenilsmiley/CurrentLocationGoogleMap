package com.example.fenil.testapp;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.location.LocationServices;


import java.io.IOException;
import java.util.List;
import java.util.Locale;

public class CurrentLocationActivity extends AppCompatActivity implements GoogleApiClient.OnConnectionFailedListener,GoogleApiClient.ConnectionCallbacks,LocationListener {

    Button btnGo;
    private double Latitude;
    private double Longitude;
    GoogleApiClient googleApiClient;
    static final int REQUEST_LOCATION = 1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_current_location);

        btnGo = (Button) findViewById(R.id.btnGo);
        googleApiClient = new GoogleApiClient.Builder(this)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .addApi(LocationServices.API)
                .build();
        googleApiClient.connect();
        btnGo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Toast.makeText(CurrentLocationActivity.this, ""+Latitude, Toast.LENGTH_SHORT).show();
                Intent i=new Intent(CurrentLocationActivity.this,MapsActivity.class);
                i.putExtra("Lat",Latitude);
                i.putExtra("Long",Longitude);
                startActivity(i);
            }
        });
    }

    @Override
    public void onLocationChanged(Location location) {
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED){
            ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.ACCESS_FINE_LOCATION},REQUEST_LOCATION);
            return;
        }
        location = LocationServices.FusedLocationApi.getLastLocation(googleApiClient);
        if (location == null){
            Toast.makeText(this, "location is null", Toast.LENGTH_SHORT).show();
        }
        else{
            Latitude= location.getLatitude();
            Longitude= location.getLongitude();
            findAddres(Latitude,Longitude);
            Log.e("Locations ", String.valueOf(location.getLatitude())+location.getLongitude());

        }
    }
    public void findAddres(Double latitude,Double longitude){
        Geocoder geocoder=new Geocoder(CurrentLocationActivity.this, Locale.getDefault());
        String s="Addres ---->";{
            try {
                List<Address> list=geocoder.getFromLocation(latitude,longitude,5);

                for (int i=0;i<list.size();i++){
                    Address address=list.get(i);
                    s += "Address " +(i+1) +" : \n";
                    for (int j=0;j<address.getMaxAddressLineIndex(); j++){
                        s += address.getAddressLine(j) + ", ";
                    }
                    s += address.getLocality() + "("+address.getPostalCode()+"), "+ address.getCountryName()+ "("+ address.getCountryCode()+")\n\n";

                }
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }
        Toast.makeText(this, ""+s, Toast.LENGTH_SHORT).show();
        Log.i("Test", "findAddres: "+s);
    }
    @Override
    public void onStatusChanged(String provider, int status, Bundle extras) {

    }

    @Override
    public void onProviderEnabled(String provider) {

    }

    @Override
    public void onProviderDisabled(String provider) {

    }
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode){
            case REQUEST_LOCATION:
                googleApiClient = new GoogleApiClient.Builder(this)
                        .addConnectionCallbacks(this)
                        .addOnConnectionFailedListener(this)
                        .addApi(LocationServices.API)
                        .build();
                googleApiClient.connect();
                break;
        }
    }

    @Override
    public void onConnected(@Nullable Bundle bundle) {
        if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED){
            ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.ACCESS_FINE_LOCATION},REQUEST_LOCATION);
            return;
        }
        Location location=LocationServices.FusedLocationApi.getLastLocation(googleApiClient);
        if (location == null){
            Toast.makeText(this, "location is null", Toast.LENGTH_SHORT).show();
        }
        else{
            Latitude=location.getLatitude();
            Longitude=location.getLongitude();
            findAddres(Latitude,Longitude);
            Log.e("LatAndLong"," LAtitude :- "+location.getLatitude()+" Longitute :- "+location.getLongitude());
        }
    }

    @Override
    public void onConnectionSuspended(int i) {

    }

    @Override
    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {

    }
}
